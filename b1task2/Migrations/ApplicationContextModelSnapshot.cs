// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using b1task2.Context;

#nullable disable

namespace b1task2.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("b1task2.Models.Balance.BalanceFile", b =>
                {
                    b.Property<int>("BalanceFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceFileId"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BalanceFileId");

                    b.ToTable("BalanceFiles");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceLine", b =>
                {
                    b.Property<int>("BalanceLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceLineId"));

                    b.Property<int?>("BalanceLineBlockId")
                        .HasColumnType("int");

                    b.Property<int>("BalanceLineNumber")
                        .HasColumnType("int");

                    b.Property<double>("OpeningBalanceAsset")
                        .HasColumnType("float");

                    b.Property<double>("OpeningBalanceLiability")
                        .HasColumnType("float");

                    b.Property<double>("TurnoverCredit")
                        .HasColumnType("float");

                    b.Property<double>("TurnoverDebit")
                        .HasColumnType("float");

                    b.HasKey("BalanceLineId");

                    b.HasIndex("BalanceLineBlockId");

                    b.ToTable("BalanceLines");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceLineBlock", b =>
                {
                    b.Property<int>("BalanceLineBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceLineBlockId"));

                    b.Property<int>("BalanceLineBlockNumber")
                        .HasColumnType("int");

                    b.Property<int?>("BalanceSheetClassId")
                        .HasColumnType("int");

                    b.HasKey("BalanceLineBlockId");

                    b.HasIndex("BalanceSheetClassId");

                    b.ToTable("BalanceLineBlocks");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceSheetClass", b =>
                {
                    b.Property<int>("BalanceSheetClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceSheetClassId"));

                    b.Property<int?>("BalanceFileId")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BalanceSheetClassId");

                    b.HasIndex("BalanceFileId");

                    b.ToTable("BalanceSheetClasses");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceLine", b =>
                {
                    b.HasOne("b1task2.Models.Balance.BalanceLineBlock", null)
                        .WithMany("BalanceLines")
                        .HasForeignKey("BalanceLineBlockId");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceLineBlock", b =>
                {
                    b.HasOne("b1task2.Models.Balance.BalanceSheetClass", null)
                        .WithMany("BalanceLineBlocks")
                        .HasForeignKey("BalanceSheetClassId");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceSheetClass", b =>
                {
                    b.HasOne("b1task2.Models.Balance.BalanceFile", null)
                        .WithMany("BalanceSheetClasses")
                        .HasForeignKey("BalanceFileId");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceFile", b =>
                {
                    b.Navigation("BalanceSheetClasses");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceLineBlock", b =>
                {
                    b.Navigation("BalanceLines");
                });

            modelBuilder.Entity("b1task2.Models.Balance.BalanceSheetClass", b =>
                {
                    b.Navigation("BalanceLineBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
